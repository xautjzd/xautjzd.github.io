<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基础技术 on Zhengdong.jzd 个人博客</title><link>https://xautjzd.github.io/tags/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/</link><description>Recent content in 基础技术 on Zhengdong.jzd 个人博客</description><generator>Hugo</generator><language>zh-cn</language><copyright>© jzd</copyright><lastBuildDate>Thu, 18 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xautjzd.github.io/tags/%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>域名是如何解析的？</title><link>https://xautjzd.github.io/posts/2022-08-18-how-dns-works/</link><pubDate>Thu, 18 Aug 2022 00:00:00 +0000</pubDate><guid>https://xautjzd.github.io/posts/2022-08-18-how-dns-works/</guid><description>&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;p>我们生活在互联网时代，每天的工作生活几乎都在与互联网打交道，比如使用 Google 查找工作学习所需资料，使用 Youtube、抖音、网易云音乐等进行娱乐活动，通过 Twitter、微博、微信等获取新闻资讯及社交，使用京东、天猫、拼多多等购物，使用微信支付、支付宝支付进行付款等，这些都离不开网络。那么作为构成网络基础设施核心之一的域名(Domain)你知道是如何工作的吗？下面我们简单展开介绍下。&lt;/p>
&lt;p>所有的信息都存储在服务器上，可通过 IP 地址访问获取，但通常 IP 地址难以记住，于是乎产生了域名概念。起初网络仅有少数服务器构成，域名到 IP 的映射信息可存储在单个文件(eg: /etc/hosts)，随着网络的蓬勃发展，单文件难以容纳所有的域名IP 映射关系，同时映射关系变更时，难以及时同步至各服务器，于是 &lt;a href="https://en.wikipedia.org/wiki/Domain_Name_System">DNS(Domain Name System) 协议&lt;/a>诞生，映射关系通过 DNS 服务器集中存储，用户根据所需向 DNS 服务器查询。那么 DNS 服务器是如何来存储域名映射关系的呢？这个映射关系是谁来负责写入的呢？下面来揭晓。&lt;/p></description></item><item><title>MySQL 数据库优化</title><link>https://xautjzd.github.io/posts/2022-01-06-mysql-optimizing/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://xautjzd.github.io/posts/2022-01-06-mysql-optimizing/</guid><description>&lt;p>MySQL 数据库优化可从以下方面着手：&lt;/p>
&lt;ol>
&lt;li>SQL 语句优化&lt;/li>
&lt;li>索引优化&lt;/li>
&lt;li>锁优化&lt;/li>
&lt;li>缓存优化&lt;/li>
&lt;li>InnoDB 存储引擎优化&lt;/li>
&lt;/ol>
&lt;h2 id="1-sql-语句优化">1. SQL 语句优化&lt;/h2>
&lt;ul>
&lt;li>检查 select 的 where 条件是否走索引，可用 explain 查看。&lt;/li>
&lt;li>最小化全表扫描次数。&lt;/li>
&lt;li>定期使用 &lt;code>ANALYZE TABLE&lt;/code> 以保持表的统计信息是最新的。&lt;/li>
&lt;/ul>
&lt;p>更多，请参考: &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html">https://dev.mysql.com/doc/refman/8.0/en/select-optimization.html&lt;/a>&lt;/p>
&lt;h2 id="2-索引优化">2. 索引优化&lt;/h2>
&lt;p>参考: &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/optimization-indexes.html">https://dev.mysql.com/doc/refman/8.0/en/optimization-indexes.html&lt;/a>&lt;/p>
&lt;h2 id="3-锁优化">3. 锁优化&lt;/h2>
&lt;p>参考: &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/locking-issues.html">https://dev.mysql.com/doc/refman/5.7/en/locking-issues.html&lt;/a>&lt;/p>
&lt;h2 id="4-缓存优化">4. 缓存优化&lt;/h2>
&lt;p>参考: &lt;a href="https://dev.mysql.com/doc/refman/5.7/en/buffering-caching.html">https://dev.mysql.com/doc/refman/5.7/en/buffering-caching.html&lt;/a>&lt;/p>
&lt;h2 id="5-innodb-存储引擎优化">5. InnoDB 存储引擎优化&lt;/h2>
&lt;h3 id="51-innodb-存储磁盘-io-优化">5.1 InnoDB 存储磁盘 I/O 优化&lt;/h3>
&lt;h4 id="511-参数-innodb_buffer_pool_size">5.1.1 参数 &lt;code>innodb_buffer_pool_size&lt;/code>&lt;/h4>
&lt;p>&lt;code>innodb_buffer_pool_size&lt;/code> 一般调为系统内存的 50%~75%。&lt;/p>
&lt;h4 id="512-参数-innodb_flush_method">5.1.2 参数 &lt;code>innodb_flush_method&lt;/code>&lt;/h4>
&lt;p>InnoDB 默认为 &lt;code>fsync&lt;/code>，但在一些 GNU/Linux 或 Unix 发行版下，fsync 刷新缓存文件至磁盘非常慢，可将 &lt;code>innodb_flush_method&lt;/code> 调整为 &lt;code>O_DSYNC&lt;/code>。&lt;/p>
&lt;h4 id="513-参数-innodb-fsync-threshold">5.1.3 参数 &lt;code>innodb-fsync-threshold&lt;/code>&lt;/h4>
&lt;p>InnoDB 默认为 &lt;code>0&lt;/code>，可调整 innodb 缓存阈值，避免单次大文件缓存刷盘。&lt;/p></description></item><item><title>什么是文件系统？</title><link>https://xautjzd.github.io/posts/2020-09-08-what-is-file-system/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://xautjzd.github.io/posts/2020-09-08-what-is-file-system/</guid><description>&lt;ul>
&lt;li>文件系统是什么？&lt;/li>
&lt;li>文件系统组成&lt;/li>
&lt;li>如何写一个简单的文件系统&lt;/li>
&lt;/ul>
&lt;h2 id="文件系统是什么">文件系统是什么？&lt;/h2>
&lt;ul>
&lt;li>软件&lt;/li>
&lt;li>记录文件元信息(文件大小，所属用户，包含块等)&lt;/li>
&lt;/ul>
&lt;h2 id="文件系统组成">文件系统组成&lt;/h2>
&lt;h3 id="inode">inode&lt;/h3>
&lt;p>inode 记录着文件的元信息，包含以下部分:&lt;/p>
&lt;ul>
&lt;li>文件大小&lt;/li>
&lt;li>组件文件的块(block)&lt;/li>
&lt;li>属主(owner)&lt;/li>
&lt;li>访问权限&lt;/li>
&lt;li>访问时间&lt;/li>
&lt;li>创建时间&lt;/li>
&lt;li>修改时间&lt;/li>
&lt;/ul>
&lt;h3 id="inode-table">inode table&lt;/h3>
&lt;p>为了管理 inode 信息，需要有个数据数据结构存储 inode 信息, 称之为 inode table, 会占一部分磁盘空间，若 inode 大小为 256 bytes, 一个 4k 大小的 block 可存储 16 个 inodes。&lt;/p>
&lt;h3 id="allocation-list">allocation list&lt;/h3>
&lt;p>为了管理 block 是否已分配，需要有个数据结构存储，通常可以用&lt;a href="https://en.wikipedia.org/wiki/Bitap_algorithm">位图(bitmap)&lt;/a> 算法进行存储, 用 1bit 表示该 block 是否已使用，一个 4k 大小的 block 可存储 32k 个 block 使用情况。&lt;/p>
&lt;h3 id="superblock">superblock&lt;/h3>
&lt;p>superblock 用于存储文件系统元信息，包括 inodes 数量、文件系统中数据块(data block)数量、inode table 起始块位置、用于标识文件系统类型的魔数(magic number)等。操作系统挂载文件系统时，会首先读取 superblock 信息。&lt;/p></description></item></channel></rss>