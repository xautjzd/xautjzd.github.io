<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Zhengdong.jzd 个人博客</title><link>http://xautjzd.github.io/categories/linux/</link><description>Recent content in Linux on Zhengdong.jzd 个人博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© jzd</copyright><lastBuildDate>Tue, 01 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="http://xautjzd.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Git远程分支的一些操作</title><link>http://xautjzd.github.io/posts/2014-04-01-some-operation-on-git-branch/</link><pubDate>Tue, 01 Apr 2014 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2014-04-01-some-operation-on-git-branch/</guid><description>&lt;p>&lt;img src="http://xautjzd.github.io/images/20140401.jpg" alt="">&lt;/p>
&lt;p>我是个爱折腾的人，昨天晚上突然看着自己的博客主题不爽，便立马将其从原先的Greyshade换到现在的Cleanpress。换完并构思一篇新博客之后，再次提交到GitHub上，得到提示此分支滞后于GitHub上，采用&lt;code>git pull&lt;/code>又产生了太多冲突，冲突少手动解决还可，太多更改起来太麻烦，便萌生推掉远程分支重新提交的念头。可之前从未对远程分支做过相关的操作，只是偶尔删除远程库上的单个文件而已，又不得不求助Google了。碰到问题在解决过程中总是会学到很多，并且记忆深刻，现予以记录，方便自己，也回馈社会。&lt;/p>
&lt;p>删除之前先查看远程分支，在确定的情况下再作删除，以致不会删错。&lt;/p>
&lt;h2 id="查看远程分支">查看远程分支&lt;/h2>
&lt;p>采用&lt;code>git branch -a&lt;/code>可查看所有的分支(本地+远程),而&lt;code>git branch -r&lt;/code>仅显示远程。如果打开颜色支持，还会看到远程分支的颜色与本地不同。&lt;/p></description></item><item><title>C语言中的Segment fault问题</title><link>http://xautjzd.github.io/posts/2014-03-15-segment-fault-core-dumped-of-c/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2014-03-15-segment-fault-core-dumped-of-c/</guid><description>&lt;p>![](img /images/20140315.jpg)&lt;/p>
&lt;h2 id="什么是segment-fault">什么是Segment fault?&lt;/h2>
&lt;blockquote>
&lt;p>a segmentation fault (often shortened to segfault) or access violation is a fault raised by hardware with memory protection, notifying an operating system (OS) about a memory access violation; on x86 computers this is a form of general protection fault.&lt;/p>
&lt;/blockquote>
&lt;p>以上为&lt;a href="http://en.wikipedia.org/wiki/Segmentation_fault">Wikipedia&lt;/a>对段错误的解释。用通俗易懂的话来说就是访问越界，访问了不存在或者受操作系统保护的内存，通常都是由于数组越界或者指针引起。&lt;/p>
&lt;h2 id="产生段错误的原因">产生段错误的原因&lt;/h2>
&lt;ol>
&lt;li>dereferencing NULL&lt;/li>
&lt;li>dereferencing an uninitialized pointer&lt;/li>
&lt;li>deferencing a pointer that has been freed/out of scope&lt;/li>
&lt;li>writing off the end of an array&lt;/li>
&lt;li>recursive function that uses all of the stack space&lt;/li>
&lt;/ol></description></item><item><title>Tmux常用操作总结</title><link>http://xautjzd.github.io/posts/2013-12-04-sumary-about-tmux-operation/</link><pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-12-04-sumary-about-tmux-operation/</guid><description>&lt;p>以前也写过一篇关于&lt;a href="http://xautjzd.github.io/blog/2013/08/08/tmux-use-and-configuration/">tmux的文章&lt;/a>,大概对tmux从简介、安装到操作已有简单的介绍，但由于是刚使用tmux时所写，总感觉操作部分写的不是很好，不够全面，所以便出现了此篇，算是填补前一篇的不足吧。&lt;/p>
&lt;p>前边的操作前缀是Ctrl+b组合键，这两个键相隔甚远，操作起来太别扭，后来便在&lt;code>~/.tmux.conf&lt;/code>配置文件中更改成&lt;code>Ctrl+a&lt;/code>前缀了。具体配置见GitHub上&lt;a href="https://github.com/xautjzd/dotvim">我的tmux配置&lt;/a>。&lt;/p>
&lt;h3 id="tmux常用操作">&lt;strong>Tmux常用操作&lt;/strong>&lt;/h3>
&lt;p>####1. 新建Session&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>$tmux new -s sessionname
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>####2. 杀死指定Session&lt;/p></description></item><item><title>Vim寄存器</title><link>http://xautjzd.github.io/posts/2013-10-27-vim-registers/</link><pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-10-27-vim-registers/</guid><description>&lt;p>谈Vim寄存器前先对昨天做个总结吧。Rails Girls昨天在西安的ThoughtWorks成功举办，目的是帮女性程序员了解Ruby &amp;amp; Rails，报名参加的学员大概有30多人，教练大致有10来个，由于活动是ThoughtWorks和西安的Rubyists一起合作举办，所以我作为西安Rubyists的一员报名当了教练(由于教练奇缺，而我们Rubyist成员大多都去北京参加RubyConf了，所以我作为Rubyists里面的菜鸟报名当教练了，去了发现除我外，其他教练都是TW员工,顿时汗颜)。&lt;/p></description></item><item><title>Hadoop集群</title><link>http://xautjzd.github.io/posts/2013-10-22-hadoop-cluster-1/</link><pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-10-22-hadoop-cluster-1/</guid><description>&lt;p>最近开始研究起Hadoop,《Hadoop in Action》大概看了3章，然后开始着手搭建环境。&lt;/p>
&lt;p>由于设备的受限，让老师给分了两台虚拟机（4G内存，20G硬盘，CentOS6.4），在上面开始搭建Hadoop集群，其中一台作为master,另一台作为slave。环境的搭建大概花了一天多的时间，主要有JDK的配置和SSH的配置，这两项已经是轻车熟路，所以很快便配置好。但是Hadoop才刚接触，所以配置起来速度慢点，没有一个绝对的参考资料，网上资料虽颇丰，但甄别对与错却需要一定时间，并且还要弄懂配置参数的意义。前后大致花了有半天时间。配置好后启动服务时却出错，google搜索了好久，也试过很多方法，但一直没解决。&lt;/p></description></item><item><title>Putty SSH中文乱码</title><link>http://xautjzd.github.io/posts/2013-10-18-ssh-messy-code/</link><pubDate>Fri, 18 Oct 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-10-18-ssh-messy-code/</guid><description>由于Fedora安装在教研室的台式机上，小组的活动在科协，每次去又免不了使用Linux环境，所以Putty便派上用场了。Putty作为Windows下的SSH工具，确实很方便，解决了很多不必要的麻烦，但是发现在使用的时候，中文显示乱码。求救Google的时候到了，网上一搜，真的是一大堆，随便查看了一篇博客，照着试了一下便解决。方法如下：
windows-&amp;gt;Appearance-&amp;gt;Translation,在其中将字体改为UTF-8便没问题。
问题确实能解决，但是发现不能保存设置，每次打开Putty时都需要重新设置，这点有待改进,不知道是我安装的putty版本过低还是其他的缘故。在分享中成长，在成长中分享，大胆的分享吧，Don&amp;rsquo;t be shy!</description></item><item><title>Linux硬链接与软链接</title><link>http://xautjzd.github.io/posts/2013-10-10-linux-hard-link-vs-soft-link/</link><pubDate>Thu, 10 Oct 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-10-10-linux-hard-link-vs-soft-link/</guid><description>&lt;p>链接的概念其实不仅限在Linux中，在类Unix和Windows中也存在，只是网上资料大多都讨论的是类Unix的链接。下面主要对所了解的类Unix下的链接谈谈自己的认识。&lt;/p>
&lt;p>###链接存在的目的&lt;/p>
&lt;p>链接的出现主要是为了解决系统中文件的共享，同时有其他附加的好处：隐藏真实文件路径、增加权限安全及节省存储。简单的举例说明：&lt;/p>
&lt;p>Linux中有7种run level(0-6),其中0代表关机，1代表单用户模式(用于系统维护，禁止远程登陆),2代表多用户状态(不支持NFS)，3代表完全的多用户模式，4系统保留(未使用),5代表X11模式(GUI模式)，6则代表重启。&lt;/p>
&lt;p>这7种模式分别对应/etc/rc.d/rcN.d目录(N指0-6之间的数字)，存储的是每种启动模式下要启动的程序，但实际的程序其实存储在/etc/rc.d/init.d目录中，/etc/rc.d/rcN.d中都是链接而已，链接到/etc/rc.d/init.d目录中对应的程序(这样做的目的是为了管理上的方便，试想一下，如果有多个runlevel包含同一个程序，需要对这个程序的启动脚本进行修改时，只需更改/etc/rc.d/init.d中的实际文件，而不需要改动/etc/rc.d/rcN.d)。&lt;/p>
&lt;p>###链接的分类&lt;/p>
&lt;p>链接分为两种：硬链接(hard link)与阮链接(soft link)。谈链接就不得不谈inode，所以先简单地介绍下inode。&lt;/p></description></item><item><title>Linux下锐捷客户端上网</title><link>http://xautjzd.github.io/posts/2013-10-09-surf-internet-under-linux-about-ruijie/</link><pubDate>Wed, 09 Oct 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-10-09-surf-internet-under-linux-about-ruijie/</guid><description>自己虽然一直用的校园网，但是由于教研室这块位置比较特殊，不需要使用锐捷客户端认证，但其他地方一般都需要。所以今早有个朋友在笔记本上安装了Ubuntu，但是无法通过锐捷web方式认证，下载的锐捷Linux版客户端安装后也无法上网，所以这方面我也不熟悉，只能求助Google了。由于众多高校的网络都是使用锐捷的这一套，所以大同小异，这方面的资料也不少，Google搜索很快便找到了解决方法，用华科的一个客户端即可，下载地址：http://code.google.com/p/mentohust/
下载后，切换到下载的目录，然后运行sudo dpkg -i 'your deb packagename'即可，安装过程中，一步一步按照其步骤输入相应信息即可。安装完成后，会将配置的信息存储在/etc/mentohust.conf文件中，也可进行修改。在安装的过程中，如果采用DHCP方式，在选择时应该注意，选择1或者2，千万别选择3，否则上不了网。各选项的含义是：
-d DHCP方式：0（不使用） 1（二次认证）2（认证后）3（认证前）
关于mentohust的详细参数解释，请参考官网wiki</description></item><item><title>Fedora下使用sudo</title><link>http://xautjzd.github.io/posts/2013-10-08-use-sudo-in-fedora/</link><pubDate>Tue, 08 Oct 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-10-08-use-sudo-in-fedora/</guid><description>Linux下日常操作使用一般用户权限即可，但是往往有一些操作需要用到root权限，如服务的启动、软件的安装等，直接转到root下进行操作可不是一个好习惯，比较稳妥的方式就是使用sudo进行操作。首先检查系统是否已经安装sudo,接下来需要在/etc/sudoers文件下进行配置相应的权限。
在root ALL=(ALL) ALL这行下面添加username ALL=(ALL) NOPASSWD:ALL即可。其中username为要使用sudo的用户，并且每次使用sudo时不需要输入root密码。</description></item><item><title>计算机启动过程</title><link>http://xautjzd.github.io/posts/2013-09-26-boot-process/</link><pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-09-26-boot-process/</guid><description>计算机启动过程的详细介绍请参考阮一峰老师的两篇博文：
http://www.ruanyifeng.com/blog/2013/02/booting.html http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html 写的非常通俗易懂，真的很佩服阮老师的文笔，有时候自己写的博客自己都有点目不忍视，更何况别人呢。要达到这样的水平真的还有好长的路要走。加油吧</description></item><item><title>搭建Git服务器</title><link>http://xautjzd.github.io/posts/2013-09-17-build-git-remote-repository/</link><pubDate>Tue, 17 Sep 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-09-17-build-git-remote-repository/</guid><description>&lt;p>从开始用Git到现在也已经有一年时间了，但一直都在本地开发，用于管理本地的代码，没有进行多人协作开发，所以也没有必要搭建一个Git服务器。&lt;/p>
&lt;p>但就在昨晚，我在教研室给大家介绍Git工具时，感觉大家对这个工具貌似没有太大的热情，猜其原因，可能是因为大家对这个工具过于陌生，而我又讲的太过细节，所以他们可能听得有点烦。但是只有试过之后才能感觉其方便之处，我也希望教研室的同学都能掌握它，所以便决定在教研室搭建一个Git服务器，供大家使用，也思索着今后的项目都用git来进行管理。毕竟现在教研室只有我一人使用git,其他同学都用svn,甚至不用(其实用svn的同学不超过3个)，开发项目也难以统一，而我个人在使用过git后又不想转向svn，同时也非常希望身边的同学也能去使用git这么一个优秀工具，所以只能忽悠他们转向git了。不过经昨晚一役，证明了我忽悠人的本领完全不到家，看来今后得好好练练了。前奏有点过于冗长，下面进入正题吧。&lt;/p></description></item><item><title>VirtualBox安装ArchLinux系统</title><link>http://xautjzd.github.io/posts/2013-09-12-installing-archlinux-in-virtualbox/</link><pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-09-12-installing-archlinux-in-virtualbox/</guid><description>&lt;p>都说ArchLinux很适合折腾，趁今天有时间，就试着安装了一把，不过看ArchLinux的Beginners&amp;rsquo;s Guide，照着其步骤来，结果还是看的云里雾里，看的人头大。便直接上Youtube上找了一个视频，顿时豁然开朗。安装概览如下：&lt;/p>
&lt;p>##ArchLinux Install&lt;/p>
&lt;ol>
&lt;li>分区&lt;/li>
&lt;li>格式化分区&lt;/li>
&lt;li>挂载分区&lt;/li>
&lt;li>更改安装镜像&lt;/li>
&lt;li>安装基本系统&lt;/li>
&lt;li>生成fstab&lt;/li>
&lt;li>Chroot到新系统&lt;/li>
&lt;li>配置系统&lt;/li>
&lt;li>开启网络服务&lt;/li>
&lt;li>创建初始化ramdisk环境&lt;/li>
&lt;li>设置root密码&lt;/li>
&lt;li>安装配置bootloader&lt;/li>
&lt;li>卸载分区并重启系统&lt;/li>
&lt;li>安装图形用户界面&lt;/li>
&lt;/ol>
&lt;p>详细步骤如下：&lt;/p>
&lt;p>###1. 分区&lt;/p>
&lt;p>虚拟机挂在iso镜像后，然后启动系统，进入后默认进入root提示符，然后输入：&lt;/p>
&lt;pre>&lt;code>root#cfdisk
&lt;/code>&lt;/pre>
&lt;p>进行分区，一般分三个即可。最后分区结果如下：&lt;/p>
&lt;pre>&lt;code>dev/sda1 / 8G
dev/sda2 /swap 1G(在空间最后)
dev/sda3 /home 4G
&lt;/code>&lt;/pre>
&lt;p>每个人的分区情况都可能不同，具体依照自己的分区来决定，以下操作都是根据我的分区来进行。&lt;/p></description></item><item><title>查看网站所用Web服务器类型</title><link>http://xautjzd.github.io/posts/2013-09-04-lookup-webserver/</link><pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-09-04-lookup-webserver/</guid><description>学习Rails的Layout过程中，其中有提到curl，所以便简单的看了下curl的功能。虽说以前学习Shell的过程中也看到过curl,不过没怎么用过，只知道和wget功能类似，只是wget是将请求的web资源下载到本地，而curl则是在shell中显示，至于有什么其他功能也便不清楚。但是今天发现curl其实还可以用来查看website所用的web服务器类型，通过curl -I url-you-want-to-lookup命令查看即可。以下是我查看ruby-china的一个截图： 从中可以发现ruby-china采用的是nginx服务器。至于curl其他的功能慢慢再发掘吧。</description></item><item><title>Linux下截图工具shutter的安装与配置</title><link>http://xautjzd.github.io/posts/2013-08-16-install-and-config-shutter/</link><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-08-16-install-and-config-shutter/</guid><description>我一直使用的是Fedora17，自带的截图工具实在不敢恭维，但也就这样断断续续的用着，不过也用的不多。但今天突然鬼使神差的搜了下其他的截图工具，Google搜了下，发现好多提到shutter，既然这么多文章都提到，说明肯定着实不赖，便尝试了下。安装及配置如下：
###1.安装 安装过程很简单，执行下面命令即可： #yum install shutter ###2.配置 QQ截图快捷键&amp;lt;ctrl&amp;gt;+&amp;lt;alt&amp;gt;+A用习惯了，所以也对shutter继续保留这个快捷键。具体配置方法如下： 在System Tools&amp;gt;System Settings&amp;gt;Keyboard&amp;gt;Shortcuts&amp;gt;Custom Shortcuts中添加了三个快捷键：
截图整个屏幕（shutter -f）
截图当前活动窗口(shutter -a)
截图选定区域(shutter -s)
具体配置及对应的快捷键设置参考下图：</description></item><item><title>终端分屏工具tmux的安装与常用操作</title><link>http://xautjzd.github.io/posts/2013-08-08-tmux-use-and-configuration/</link><pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate><guid>http://xautjzd.github.io/posts/2013-08-08-tmux-use-and-configuration/</guid><description>&lt;p>##1. tmux简介&lt;/p>
&lt;p>tmux是terminal multiplexer的简称，是一款终端分屏的工具，可以在同一屏幕中划分出多个独立的shell环境，这样便于对比，唯一的缺陷是窗口比较小而已。一个server可以有多个session,一个session可以有多个windows,一个windows可以有多个pane.具体见&lt;a href="http://tmux.sourceforge.net/">官网&lt;/a>介绍。&lt;/p>
&lt;p>##2. 安装&lt;/p>
&lt;p>采用相应系统的包管理器即可安装。我装的是fedora,现以fedora为例：&lt;/p>
&lt;pre>&lt;code>#yum install tmux
&lt;/code>&lt;/pre>
&lt;p>包不到1M大小，很快便安装完成。&lt;/p></description></item></channel></rss>